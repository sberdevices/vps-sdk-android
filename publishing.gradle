apply plugin: "maven-publish"
apply plugin: "signing"

tasks.register("sourceJar", Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

afterEvaluate {
    signing {
        def localProperties = loadLocalProperties()
        def keyId = localProperties.getProperty("GPG_KEYID")
        def secretKey = loadSecretKey()
        def password = localProperties.getProperty("GPG_PASSWORD")
        useInMemoryPgpKeys(keyId, secretKey, password)
    }
    publishing {
        publications {
            releaseAar(MavenPublication) {
                from components.release
                artifact sourceJar

                pom {
                    name = "VPS SDK"
                    description = "This is Visual Positioning System SDK for native Android apps"
                    url = "https://github.com/sberdevices/vps-sdk-android"

                    licenses {
                        license {
                            name = "Sber Public License at-nc-sa v.2"
                            url = "https://github.com/sberdevices/vps-sdk-android/blob/main/LICENSE"
                        }
                    }

                    developers {
                        developer {
                            name = "Alexandr Evgrashin"
                            email = "evgrashin.a.s@sberbank.ru"
                        }
                        developer {
                            name = "Sergey Ugolkov"
                            email = "Ugolkov.S.Vi@sberbank.ru"
                        }
                    }

                    scm {
                        url = "https://github.com/sberdevices/vps-sdk-android.git"
                    }
                }
            }
        }

        repositories {
            maven {
                name = "sonatypeStaging"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                def localProperties = loadLocalProperties()
                credentials {
                    username = localProperties.getProperty("OSSRH_USERNAME")
                    password = localProperties.getProperty("OSSRH_PASSWORD")
                }
            }
        }
    }

    signing {
        sign(publishing.publications)
    }
}

private Properties loadLocalProperties() {
    def properties = new Properties()
    properties.load(new FileReader(getRootProject().file("local.properties")))
    return properties
}

private String loadSecretKey() {
    def file = getRootProject().file("secret.key")
    return new String(file.readBytes())
}